package state;

import utils.FastNumberFormat;

public abstract class ApplicationId implements Comparable<ApplicationId> {


    public static final String appIdStrPrefix = "application";

    private static final String APPLICATION_ID_PREFIX = appIdStrPrefix + '_';


    public static ApplicationId newInstance(long clusterTimestamp, int id) {
        ApplicationId appId = Records.newRecord(ApplicationId.class);
        appId.setClusterTimestamp(clusterTimestamp);
        appId.setId(id);
        appId.build();
        return appId;
    }


    public abstract int getId();

    protected abstract void setId(int id);


    public abstract long getClusterTimestamp();

    protected abstract void setClusterTimestamp(long clusterTimestamp);

    protected abstract void build();

    private static final int APP_ID_MIN_DIGITS = 4;

    public int compareTo(ApplicationId other) {
        if (this.getClusterTimestamp() - other.getClusterTimestamp() == 0) {
            return this.getId() - other.getId();
        } else {
            return this.getClusterTimestamp() > other.getClusterTimestamp() ? 1 :
                    this.getClusterTimestamp() < other.getClusterTimestamp() ? -1 : 0;
        }
    }

    public String toString() {
        StringBuilder sb = new StringBuilder(64);
        sb.append(APPLICATION_ID_PREFIX);
        sb.append(getClusterTimestamp());
        sb.append('_');
        FastNumberFormat.format(sb, getId(), APP_ID_MIN_DIGITS);
        return sb.toString();
    }

    public static ApplicationId fromString(String appIdStr) {
        if (!appIdStr.startsWith(APPLICATION_ID_PREFIX)) {
            throw new IllegalArgumentException("Invalid EventId prefix: "
                    + appIdStr + ". The valid EventId should start with prefix "
                    + appIdStrPrefix);
        }
        try {
            int pos1 = APPLICATION_ID_PREFIX.length() - 1;
            int pos2 = appIdStr.indexOf('_', pos1 + 1);
            if (pos2 < 0) {
                throw new IllegalArgumentException("Invalid EventId: "
                        + appIdStr);
            }
            long rmId = Long.parseLong(appIdStr.substring(pos1 + 1, pos2));
            int appId = Integer.parseInt(appIdStr.substring(pos2 + 1));
            ApplicationId EventId = ApplicationId.newInstance(rmId, appId);
            return EventId;
        } catch (NumberFormatException n) {
            throw new IllegalArgumentException("Invalid EventId: "
                    + appIdStr, n);
        }
    }
    @Override
    public int hashCode() {
        // Generated by eclipse.
        final int prime = 371237;
        int result = 6521;
        long clusterTimestamp = getClusterTimestamp();
        result = prime * result
                + (int) (clusterTimestamp ^ (clusterTimestamp >>> 32));
        result = prime * result + getId();
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ApplicationId other = (ApplicationId) obj;
        if (this.getClusterTimestamp() != other.getClusterTimestamp())
            return false;
        if (this.getId() != other.getId())
            return false;
        return true;
    }
}